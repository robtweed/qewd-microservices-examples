module.exports = function(args, finished) {

  /*
    Check the JWT to make sure it's for a user who has logged in
    and has therefore authenticated
  */

  if (!args.session.authenticated) {
    return finished({error: 'Not authenticated'});
  }

  /*
    Next, check that an id has been specified. Variables within the
    URI path are exposed as properties of args, so:

  */

  if (!args.id || args.id === '') {
    return finished({error: 'Invalid request'});
  }

  /*
    Next, check the incoming PUT body to make sure
    it exists
  */

  let body = args.req.body;
  if (!body) {
    return finished({error: 'Invalid request'});
  }

  /*
    Access the mg-dbx classmethod function to check if
    a Person record with that id exists

    If not, return an error object

  */

  let db = this.db.dbx;

  let exists = db.classmethod('User.Person', '%ExistsId', args.id);
  
  if (exists !== '1') {
    return finished({error: 'No person exists with id ' + args.id});
  }

  /*
    instantiate the specified Person record
  */

  let person = db.classmethod('User.Person', '%OpenId', args.id);

  /*
    Check for each Person property in the body, and
    if a new value exists, update the Person record
    using the mg-dbx setproperty function
  */

  let name = body.name;
  if (name && name !== '') {
    person.setproperty('Name', name);
  }

  let gender = body.gender;
  if (gender && gender !== '') {
    person.setproperty('Gender', gender);
  }

  let city = body.city;
  if (city && city !== '') {
    person.setproperty('City', city);
  }

  /*
    Save the updated record and close the person object
  */

  result = person.method('%Save');
  person.method('%Close');

  /*
    Finish processing and return a success flag as the response
  */
  
  finished({
    ok: true
  });
  
};
